{
  
    
        "post0": {
            "title": "Demo Day: How to contribute to PSL projects",
            "content": ". In the most recent PSL Demo Day, I illustrate how to contribute to PSL projects. The open source nature of projects in the PSL catalog allows anyone to contribute. The modularity of the code, coupled with robust testing, means that one can bite off small pieces that help improve the models and remain confident those changes work as expected. . To begin the process of finding where to contribute to PSL projects, I advise looking through the PSL GitHub Organization to see what projects interest you. Once a project of interest is identified, looking over the open “Issues” can provide a sense of where model maintainers and users are looking for help (see especially the “Help Wanted” tags). It is also completely appropriate to create a new Issue to express interest in helping and ask for direction on where that might best be done given your experience and preferences. . When you are ready to begin to contribute to a project, you’ll want to fork and clone the GitHub repository to help you get the files on your local machine and ready for you to work with. Many PSL projects outline the detailed steps to get you up and running. For example, see the Tax-Calculator Contributor Guide, which outlines the step-by-step process for doing this and confirming that everything works as expected on your computer. . After you are set up and ready to begin modifying source code for the PSL project(s) you’re interested in contributing to, you can reference the PSL-incubating Git-Tutorial project that provides more details on the Git workflow followed by most PSL projects. . As you contribute, you may want to get more involved in the community. A couple ways to do this are to join any of the PSL community events, all of which are open to the public, and to post to the PSL Discourse Forums. These are great places to meet community members and ask questions about how and where to best contribute. . I hope this helps you get started as a PSL contributor – we look forward to getting you involved in making policy analysis better and more transparent! . Resources: . PSL Git-Tutorial | PSL community events | PSL Discourse Forums | Tax-Calculator Contributor Guide | PSL GitHub Organization | .",
            "url": "https://blog.pslmodels.org/demo-day-8-contributing-psl",
            "relUrl": "/demo-day-8-contributing-psl",
            "date": " • Mar 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Demo Day: Move Policy Reform Files from Tax-Brain to Tax-Cruncher",
            "content": "Check out the video: . . Show notes: . I demonstrate how to move a policy reform file from Tax-Brain to Tax-Cruncher using the Compute.Studio API. See the Demo C/S simulation linked below for text instructions that accompany the video. . Resources: . Demo C/S simulation with instructions | .",
            "url": "https://blog.pslmodels.org/demo-day-7-taxbrain-to-taxcruncher",
            "relUrl": "/demo-day-7-taxbrain-to-taxcruncher",
            "date": " • Mar 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Demo Day: Running the scf and microdf Python packages in Google Colab",
            "content": ". For Monday’s PSL Demo Day, I showed how to use the scf and microdf PSL Python packages from the Google Colab web-based Jupyter notebook interface. . The scf package extracts data from the Federal Reserve’s Survey of Consumer Finances, the canonical source of US wealth microdata. scf has a single function: load(years, columns), which then returns a pandas DataFrame with the specified column(s), each record’s survey weight, and the year (when multiple years are requested). . The microdf package analyzes survey microdata, such as that returned by the scf.load function. It offers a consistent paradigm for calculating statistics like means, medians, sums, and inequality statistics like the Gini index. Most functions are structured as follows: f(df, col, w, groupby) where df is a pandas DataFrame of survey microdata, col is a column(s) name to be summarized, w is the weight column, and groupby is the column(s) to group records in before summarizing. . Using Google Colab, I showed how to use these packages to quickly calculate mean, median, and total wealth from the SCF data, without having to install any software or leave the browser. I also demonstrated how to use the groupby argument of microdf functions to show how different measures of wealth inequality have changed over time. Finally, I previewed some of what’s to come with scf and microdf: imputations, extrapolations, inflation, visualization, and documentation, to name a few priorities. . Resources: . Slides | Demo notebook in Google Colab | Simulation from the demonstration | scf GitHub repo | microdf GitHub repo | microdf documentation | .",
            "url": "https://blog.pslmodels.org/demo-day-6-scf-microdf",
            "relUrl": "/demo-day-6-scf-microdf",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Demo Day: How to Use OG-USA Macroeconomic Model of U.S. Fiscal Policy",
            "content": ". . . In this PSL Demo Day, I demonstrate how to use the open source OG-USA macroeconomic model of U.S. fiscal policy. Jason DeBacker and I (Richard Evans) have been the core maintainers of this project and repository for the last six years. This demo is organized into the following sections. The YouTube webinar linked above took place on January 11, 2021. . A brief note about value of the PSL community | Description of the OG-USA model | Using OG-USA on Compute Studio | . Brief note about the value of the PSL community . The Policy Simulation Library is a decentralized organization of open source policy models. The Policy Simulation Library GitHub organization houses many open source repositories, each of which represents a curated policy project by a diverse group of maintainers. The projects that have met the highest standards of best practices and documentation are designated as psl-cataloged, while newer projects that are in earlier stages are designated as psl-incubating. The philosophy and goal of the PSL environment is to make policy modeling open and transparent. It also allows more collaboration and cross-project contributions and interactions. . The Policy Simulation Library group has been holding these PSL Demo Day webinars since the end of 2020. The video of each webinar is available on the Policy Simulation Library YouTube channel. These videos are a great resource for learning the different models available in the PSL community, how the models interact, how to contribute to them, and what is on the horizon in their development. Also excellent in many of the PSL Demo Day webinars is a demonstration of how to use the models on the Compute Studio web application platform. . I have been a participant in and contributor to the PSL community since its inception. I love economic policy modeling. And I learned how sophisticated and complicated economic policy models can be. And any simulation can have hundreds of underlying assumptions, some of which may not be explicitly transparent. I think models that are used for public policy analysis have a philosophical imperative to be open source. This allows others to verify results and test sensitivity to assumptions. . Another strong benefit of open source modeling is that it is fundamentally apolitical. With proprietary closed-source policy models, an outside observer might criticize the results of the model based on the perceived political biases of the modeler or the sponsoring organization. With open-source models, a critic can be redirected to the underlying assumptions, structure, and content of the model. This is constructive criticism and debate that moves the science foreward. In the current polarized political environment in the U.S., open-source modeling can provide a constructive route for bipartisan cooperation and the democratization of computational modeling. Furthermore, open-source modeling and workflow encourages the widest forms of collaboration and contributions. . Description of OG-USA model . OG-USA is an open-source overlapping generations, dynamic general equilibrium, heterogeneous agent, macroeconomic model of U.S. fiscal policy. The GitHub repository for the OG-USA source code is github.com/PSLmodels/OG-USA. This repository contains all the source code and instructions for loading and running OG-USA and all of its dependencies on your local machine. We will probably do another PSL Demo Day on how to run OG-USA locally. This Demo Day webinar is about running OG-USA on the Compute Studio web application. See Section “Using OG-USA on Compute.Studio” below. . As a heterogeneous agent macroeconomic model, OG-USA allows for distributional analyses at the individual and firm level. That is, you can simulate the model and answer questions like, “How will an increase in the top three personal income tax rates affect people of different ages and income levels?” Microsimulation models can answer these types of distributional analysis questions as well. However, the difference between a macroeconomic model and a microsimulation model is that the macroeconomic models can simulate how each of those individuals and firms will respond to a policy change (e.g., lower labor supply or increased investment demand) and how those behavioral responses will add up and feed back into the macroeconomy (e.g., the effect on GDP, government revenue, government debt, interest rates, and wages). . OG-USA is a large-scale model and comprises tens of thousands of lines of code. The status of all of this code being publicly available on the internet with all collaboration and updates also public makes this an open source project. However, it is not enough to simply post one’s code. We have gone to great lengths to make in-line comments or “docstring” in the code to clarify the purpose of each function and line of code. For example, look in the OG-USA/ogusa/household.py module. The first function on line 18 is the marg_ut_cons() function. As is described in its docstring, its purpose is to “Compute the marginal utility of consumption.” . These in-code docstrings are not enough. We have also created textbook style OG-USA documentation at pslmodels.github.io/OG-USA/ using the Jupyter Book medium. This form of documentation has the advantage of being in book form and available online. It allows us to update the documentation in the open-source repository so changes and versions can be tracked. It describes the OG-USA API, OG-USA theory, and `OG-USA calibration. As with the model, this documentation is always a work in progress. But being open-source allows outside contributors to help with its updated and error checking. . One particular strength of the OG-USA model I want to highlight is its interaction with microsimulation models to incorporate information about tax incentives faced by the heterogeneous households in the model. We have interfaced OG-USA with microsimulation models in India and in the European Commission. OG-USA’s default for modeling the United States is to use the open-source Tax-Calculator microsimulation model, which was described by Anderson Frailey in the last Demo Day of 2020. However, DeBacker and I currently have a project in which we use OG-USA to simulate policies using the Tax Policy Center’s microsimulation model. The way OG-USA interfaces with microsimulation models to incorporate rich tax data is described in the documentation in the calibration chapter entitled, “Tax Functions”. . Using OG-USA on Compute Studio . In the demonstration, I focus on how to run experiments and simulations with OG-USA using the Compute Studio web application platform rather than installing running the model on your local machine. To use OG-USA on this web application, you will need a Compute Studio account. Once you have an account, you can start running any model available through the site. For some models, you will have to pay for the compute time, although the cost of running these models is very modest. However, all Compute Studio simulations of the OG-USA model are currently sponsored by the Open Source Economics Laboratory. This subsidy will probably run out in the next year. But we are always looking for funding for these models. . Once you are signed up and logged in to your Compute Studio account, you can go to the OG-USA model on Compute Studio at compute.studio/PSLmodels/OG-USA. The experiment that we simulated in the demonstration is available at compute.studio/PSLmodels/OG-USA/206. The description at the top of the simulation page describes the changes we made. You can look through the input page by clicking on the “Inputs” tab. We ran the model by clicking the green “Run” button at the lower left of the page. The model took about 5 hours to run, so I pre-computed the results that we discussed in the demo. The outputs of the experiment are available in the “Outputs” tab on the page. I also demonstrated how one can click the “Download Results” button at the bottom of the “Outputs” tab to download more results from the simulation. However, the full set of results is only available by installing and running the OG-USA model simulation on your local machine. . The benefits of the Compute Studio web application are that running the OG-USA model is much easier for the non-expert, and the multiple-hour computation time can be completed on a remote machine in the cloud. . Resources . PSL Demo Day YouTube webinar: “How to use OG-USA” | OG-USA on Compute Studio | Simulation from the demonstration | OG-USA GitHub repo | OG-USA documentation | Tax-Calculator GitHub repo | .",
            "url": "https://blog.pslmodels.org/demo-day-5-how-to-use-ogusa",
            "relUrl": "/demo-day-5-how-to-use-ogusa",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Demo Day: Tax-Brain",
            "content": ". For this PSL demo-day I showed how to use the Tax-Brain web-application, hosted on Compute Studio, to analyze proposed individual income tax policies. Tax-Brain integrates the Tax-Calculator and Behavioral-Responses models to make running both static and dynamic analyses of the US federal income and payroll taxes simple. The web interface for the model makes it possible for anyone to run their own analyses without writing a single line of code. . We started the demo by simply walking through the interface and features of the web-app before creating our own sample reform to model. This reform, which to my knowledge does not reflect any proposals currently up for debate, included changes to the income and payroll tax rates, bringing back personal exemptions, modifying the standard deduction, and implementing a universal basic income. . While the model ran, I explained how Tax-Brain validated all of the user inputs, the data behind the model, and how the final tax liability projections are determined. We concluded by looking through the variety of tables and graphs Tax-Brain produces and how they can easily be shared with others. . Resources: . Simulation from the demonstration | Tax-Brain GitHub repo | Tax-Calculator documentation | Behavioral-Responses documentation | .",
            "url": "https://blog.pslmodels.org/demo-day-4-taxbrain",
            "relUrl": "/demo-day-4-taxbrain",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "2020: A Year in Review",
            "content": ". . This year has been one to forget! But 2020 did have its bright spots, especially in the PSL community. This post reviews some of the highlights from the year. . The Library was able to welcome two new models to the catalog in 2020: microdf and OpenFisca-UK. microdf provides a number of useful tools for use with economic survey data. OpenFisca-UK builds off the OpenFisca platform, offering a microsimulation model for tax and benefit programs in the UK. . In addition, four new models were added to the Library as incubating projects. The ui-calculator model has received a lot of attention this year in the U.S., as it provides the capability to calculate unemployment insurance benefits across U.S. states, a major mode of delivering financial relief to individuals during the COVID crisis. PCI-Outbreak directly relates to the COVID crisis, using machine learning and natural language processing to estimate the true extent of the COVID pandemic in China. The model finds that actual COVID cases are significantly higher than what official statistics claim. The COVID-MCS model considers COVID case counts and test positivity rates to measure whether or not U.S. communities are meeting certain benchmarks in controlling the spread of the disease. On a lighter note, the Git-Tutorial project provides instruction and resources for learning to use Git and GitHub, with an emphasis on the workflow used by many projects in the PSL community. . The organization surrounding the Policy Simulation Library has been bolstered in two ways. First, we have formed a relationship with the Open Collective Foundation, who is now our fiscal host. This allows PSL to accept tax deductible contributions that will support the efforts of the community. Second, we’ve formed the PSL Foundation, with an initial board that includes Linda Gibbs, Glenn Hubbard, and Jason DeBacker. . Our outreach efforts have grown in 2020 to include the regular PSL Demo Day series and this PSL Blog. Community members have also presented work with PSL models at the PyData Global Conference, the Tax Economists Forum, AEI, the Coiled Podcast, and the Virtual Global Village Podcast. New users will also find a better experience learning how to use and contribute to PSL models as many PSL models have improved their documentation through the use of Jupyter Book (e.g., see the Tax-Calculator documentation). . We love seeing the community around open source policymaking expand and are proud that PSL models have been used for important policy analysis in 2020, including analyzing economic policy responses to the pandemic and the platforms of presidential candidates. We look forward to more progress in 2021 and welcome you to join the effort as a contributor, financially or as an open source developer. . Best wishes from PSL for a happy and healthy new year! . Resources: . PSL Twitter Feed | PSL YouTube | PSL on Open Collective | .",
            "url": "https://blog.pslmodels.org/2020-year-in-review",
            "relUrl": "/2020-year-in-review",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Demo Day: Cost-of-Capital-Calculator Web Application",
            "content": ". In the PSL Demo Day video linked above, I demonstrate how to use the Cost-of-Capital-Calculator (CCC) web application on Compute-Studio. CCC computes various measures of the impact of the tax system on business investment. These include the Hall-Jorgenson cost of capital, marginal effective tax rates, and effective average tax rates (following the methodology of Devereux and Griffith (1999)). . I begin by illustrating the various parameters available for the user to manipulate. These include parameters of the business and individual income tax systems, as well as parameters representing economic assumptions (e.g., inflation rates and nominal interest rates) and parameters dictating financial and accounting policy (e.g., the fraction of financing using debt). Note that all default values for tax policy parameters represent the “baseline policy”, which is defined as the current law policy in the year being analyzed (which itself is a parameter the user can change). Other parameters are estimated using historical data following the methodology of CBO (2014). . Next, I change a few parameters and run the model. In this example, I move the corporate income tax rate up to 28% and lower bonus depreciation for assets with depreciable lives of 20 years or less to 50%. . Finally, I discuss how to interpret output. The web app returns a table and three figures summarizing marginal effective total tax rates on new investments. This selection of output helps give one a sense of the the overall changes, as well as effects across asset types, industries, and type of financing. For the full model output, one can click on “Download Results”. Doing so will download four CSV files contain several measures of the impact of the tax system on investment for very fine asset and industry categories. Users can take these files and create tables and visualizations relevant to their own use case. . Please take the model for a spin and simulate your own reform. If you have questions, comments, or suggestions, please let me know on the PSL Discourse (non-technical questions) or by opening an issue in the CCC GitHub repository (technical questions). . Resources: . Compute Studio simulation used in the demonstration | Cost-of-Capital-Calculator web app | Cost-of-Capital-Calculator documentation | Cost-of-Capital-Calculator GitHub repository | .",
            "url": "https://blog.pslmodels.org/demo-day-3-cost-of-capital-calculator",
            "relUrl": "/demo-day-3-cost-of-capital-calculator",
            "date": " • Dec 3, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Demo Day: Tax-Cruncher",
            "content": ". For the Demo Day on November 16, I showed how to calculate a taxpayer’s liabilities under current law and under a policy reform with Tax-Cruncher. The Tax-Cruncher web application takes two sets of inputs: a taxpayer’s demographic and financial information and the provisions of a tax reform. . For the first Demo Day example (3:50), we looked at how eliminating the state and local tax (SALT) deduction cap and applying payroll tax to earnings above $400,000 would affect a high earner. In particular, our hypothetical filer had $500,000 in wages, $100,000 in capital gains, and $100,000 in itemizable expenses. You can see the results at Compute Studio simulation #634. . For the second example (17:50), we looked at how expanding the Earned Income Tax Credit (EITC) and Child Tax Credit would impact a family with $45,000 in wages and two young children. You can see the results at Compute Studio simulation #636. . Resources: . Tax-Cruncher | Tax-Cruncher-Biden | .",
            "url": "https://blog.pslmodels.org/demo-day-2-tax-cruncher",
            "relUrl": "/demo-day-2-tax-cruncher",
            "date": " • Nov 23, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Demo Day: Building Policy Reform Files",
            "content": "Check out the video: . We will host Demo Days every two weeks until the end of the year. You can see our schedule on our events page. . . Show notes: . I demonstrate how to build policy reform files using the Tax-Brain webapp on Compute Studio. (Useful links below.) This is an introductory lesson that ends with a cliffhanger. We don’t run the model. But we do generate an individual income and payroll tax reform file that is compatible with a range of policy simulation models and analytic tools, some designed for policy decision makers, others for taxpayers and benefits recipients interested in assessing their own circumstances. . Beyond individual and payroll tax analysis, the reform file can be used with models that assess pass-through and corporate taxation of businesses, as well as a variety of income benefit programs. A wide range of use cases will occupy future events. . Resources: . Demo C/S simulation | IRS Form 1040 | PSL Catalog | PSL Events | .",
            "url": "https://blog.pslmodels.org/demo-day-1-creating-reform-files",
            "relUrl": "/demo-day-1-creating-reform-files",
            "date": " • Nov 18, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Introducing the PSL Blog",
            "content": "Our mission at the Policy Simulation Library is to improve public policy by opening up models and data preparation routines for policy analysis. To support and showcase our diverse community of users and developers, we engage across several mediums: a monthly newsletter, a Q&amp;A forum, (now-virtual) meetups, our Twitter feed, our YouTube channel, documentation for models in our catalog, and of course, issues and pull requests on GitHub. . Today, we’re adding a new medium: the PSL Blog. We’ll use this space to share major updates on our catalog, provide tutorials, and summarize events or papers that involve our models. . If you’d like to share your work on our blog, or to suggest content, drop me a line. To follow along, add the PSL blog’s RSS feed or subscribe to our newsletter. . Happy reading, . Max Ghenis . Editor, PSL Blog .",
            "url": "https://blog.pslmodels.org/introducing-psl-blog",
            "relUrl": "/introducing-psl-blog",
            "date": " • Nov 6, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "The Policy Simulation Library (PSL) is a collection of models and other software for public-policy decisionmaking. PSL is developed by independent projects that meet standards for transparency and accessibility. The PSL community encourages collaborative contribution and makes the tools it develops accessible to a diverse group of users.1 . This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://blog.pslmodels.org/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.pslmodels.org/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}